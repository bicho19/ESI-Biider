package utils;


import com.mysql.jdbc.Connection;
import com.mysql.jdbc.DatabaseMetaData;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import entities.Admin;
import entities.User;
import javafx.scene.image.Image;

import java.io.InputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.TreeSet;

public class DBHelper {
    private java.sql.Connection connect = null;
    private java.sql.Statement statement = null;
    private java.sql.PreparedStatement preparedStatement = null;
    private ResultSet resultSet = null;


    //to check if the user already exist or no , using it's unique id
    public boolean checkIfIDExist(String id){
        //getting the user if it exists
        User user = getUserById(id);
        //checking if we get a user or nothing(null)
        //if we get nothing(null) then the no user with the id "id" exist
        //otherwise return true
        if(user == null) return false;
        return true;
        }

    //to check if the name contain only letters and spaces (valid name)
    public boolean isValid(String s){
        //testing if "s" is !null & !empty & first character isn't space
        //!null and !empty so we don't fall in NullpointException when pointing to a character
        //first character isn't space because it must be a letter
        if ((s!=null) && (!s.isEmpty()) && s.charAt(0)!=' '){
        char [] tmp = s.toCharArray();//dicomposing the string into an char array
        //testing for each character if it's a letter or a space
            //if it is not a letter or space so the name isn't valid
        for (char c : tmp){
            if((!Character.isLetter(c)) && c!=' ') return false;
        }
        return true;//if we reach here that means all characters are either a letter or a space
        }
        if ((s==null) || (s.isEmpty())) return true; // if "s" is null or empty it's a valid name (in case of update user only !)
        return false; // if we get here that means first character is space so it's not valid name
    }

    //checks if a table with "tableName" already exists in the database
    public boolean isTableExist(String tableName){
        connect = CoonectionConfiguration.getConnection();//getting connection
        DatabaseMetaData dbm = null; //interface with methodes that give infromation about the database
        boolean exist = false; // the variable used to return the value after tests
        try {
            dbm = (DatabaseMetaData) connect.getMetaData();
            // check if "employee" table is there
            ResultSet tables = dbm.getTables(null, null, tableName, null);
            if (tables.next()) {
                // Table does exist
                exist = true;
            }
            else {
                // Table does not exist
                exist = false;
            }
        } catch (SQLException e) {
            System.err.println("Got an exception searching for table!");
            e.printStackTrace();
        } finally {
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        return exist;
    }

    //creating table method
    public void createTable(String sql){
      if(!isTableExist(sql)){ //checking if table with the name "sql" doesn't already exist
          connect = CoonectionConfiguration.getConnection();
          try {
              statement = connect.createStatement(); //creating statement
              resultSet = statement.executeQuery(sql); //executing the sql query and returning the resultset generated by the query
          } catch (SQLException e) { //exception of sql
              System.err.println("Got an exception creating table!");
              e.printStackTrace(); // printing the path of the exception
          } finally {
              if(resultSet != null){
                  try {
                      resultSet.close(); //closing the resultSet
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
              if(connect != null){ // if connection was working normaly
                  try {
                      connect.close(); // closing the connection
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }

      }
        else System.out.println("Table already exist");
    }

    //CheckLogin of admin method
    public Admin checkLoginAdmin(Admin admin){
        Admin admin1 = new Admin(); // new Admin variable
        connect = CoonectionConfiguration.getConnection();
        try {
            // preparing Select query from admins table
            preparedStatement = connect.prepareStatement("SELECT * FROM admins WHERE username = ? AND password = ?");
            preparedStatement.setString(1,admin.getUsername()); //setting the username column
            preparedStatement.setString(2,admin.getPassword()); //setting the password column
            resultSet = preparedStatement.executeQuery(); // executing the query while returning any resultset generated by the query
            if(resultSet.isBeforeFirst()){ // checking if the result has at least 1 element
                while (resultSet.next()){  // while the pointer is pointing to an element
                    admin1.setUsername(resultSet.getString("username")); // setting the name of the variable with username retrieved
                }
            } else { // admin doesn't exist
                admin1 = null;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){ // testing if preparedStatement is open(pointing to !null)
                try {
                    preparedStatement.close(); // closing the preparedStatement
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return admin1; // returning the admin
    }

    //add admin method
    public void addAdmin(String username, String password){
        try {
            //getting all users with the name username from admins table
            connect = CoonectionConfiguration.getConnection();
            preparedStatement = connect.prepareStatement("SELECT * FROM admins WHERE username = ?");
            preparedStatement.setString(1,username);
            resultSet = preparedStatement.executeQuery();
            //checking if there is a result or no
            //if yes that means username already exist so can't be insert ,else it's not used
            if(resultSet.isBeforeFirst()){
                System.out.println("Error,username already exists");
            } else {
                try {
                    preparedStatement = connect.prepareStatement("insert into  admins (username, password) values (?, ?)");
                    preparedStatement.setString(1,username);
                    preparedStatement.setString(2,password);
                    preparedStatement.executeUpdate();
                } catch (SQLException e) {
                    System.err.println("Got an exception adding admins!");
                    e.printStackTrace();
                } finally { //closing preparedStatment + connect of insert query
                    if (preparedStatement != null){
                        try {
                            preparedStatement.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if(connect != null){
                        try {
                            connect.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
                System.out.println("Admin has been added successfullly");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally { // closing resultset + preparedstatement + connect of select query
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //delete admin method
    public void deleteAdmin(String username){
        try {
            //getting all users with the name username from admins table
            connect = CoonectionConfiguration.getConnection();
            preparedStatement = connect.prepareStatement("SELECT * FROM admins WHERE username = ?");
            preparedStatement.setString(1,username);
            resultSet = preparedStatement.executeQuery();
            //checking if there is a result or no
            //if yes that means username already exist so we can delete it
            if(resultSet.isBeforeFirst()){
                try {
                    preparedStatement = connect.prepareStatement("DELETE FROM  admins WHERE username = ?");
                    preparedStatement.setString(1,username);
                    preparedStatement.executeUpdate();
                } catch (SQLException e) {
                    System.err.println("Got an exception deleting admin!");
                    e.printStackTrace();
                } finally { //closing preparedStatment + connect of the delete query
                    if (preparedStatement != null){
                        try {
                            preparedStatement.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if(connect != null){
                        try {
                            connect.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
                System.out.println("Admin has been deleted successfullly");
            } else {
                System.out.println("Error,Admin not found");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally { //closing resultset + preparedStatment + connect of the select query
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //add user method with a parameter of a user
    public void addUser (User user){
        if(!checkIfIDExist(user.getId())){ //checking if the id exist so we can add the user
            connect = CoonectionConfiguration.getConnection();
            try { //insert query of all attributes except photos into users table
                preparedStatement = connect
                        .prepareStatement("INSERT INTO  users (id, last_name, first_name, " +
                                "birth_date, birth_place, address, finger_print) " +
                                "VALUES (?, ?, ?, ?, ?, ?, ?)");
                preparedStatement.setString(1,user.getId());
                preparedStatement.setString(2,user.getLastName());
                preparedStatement.setString(3,user.getFirstName());
                preparedStatement.setString(4,user.getBirthDate());
                preparedStatement.setString(5,user.getBirthPlace());
                preparedStatement.setString(6,user.getAddress());
                preparedStatement.setString(7,user.getFingerPrint());
                preparedStatement.executeUpdate();
                //insert query of photos into userphoto table
                //inserting photos one by one until the end of photos array
                preparedStatement = connect.prepareStatement("INSERT INTO userphoto(user_id,user_photo) VALUES (?,?)");
                int i =0;
                while(i<user.getPhotos().size()){
                    preparedStatement.setString(1,user.getId());
                    preparedStatement.setString(2,user.getPhotos().get(i));
                    preparedStatement.executeUpdate();
                    i++;
                }

            } catch (SQLException e) {
                System.err.println("Got an exception adding user!");
                e.printStackTrace();
            } finally { //closing prepared statement + connect
                if (preparedStatement != null){
                    try {
                        preparedStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if(connect != null){
                    try {
                        connect.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        //if ID already exists we can't insert the user
        else System.out.println("ID already exists");
    }

    //add user method with parameters like user but with only 1 photo
    public void addUser (String nId, String lName , String fName,
                         String bd, String bp, String adr, String fp, String photo){
        if(!checkIfIDExist(nId)){ //checking if the id exist so we can add the user
            connect = CoonectionConfiguration.getConnection();
            try { //insert query of all attributes except photo into users table
                preparedStatement = connect
                        .prepareStatement("INSERT INTO  users (id, last_name, first_name, " +
                                "birth_date, birth_place, address, finger_print) " +
                                "VALUES (?, ?, ?, ?, ?, ?, ?)");
                preparedStatement.setString(1,nId);
                preparedStatement.setString(2,lName);
                preparedStatement.setString(3,fName);
                preparedStatement.setString(4,bd);
                preparedStatement.setString(5,bp);
                preparedStatement.setString(6,adr);
                preparedStatement.setString(7,fp);
                preparedStatement.executeUpdate();
                //insert query of photo into usersphoto table
                preparedStatement = connect.prepareStatement("INSERT INTO userphoto(user_id,user_photo) VALUES (?,?)");
                preparedStatement.setString(1,nId);
                preparedStatement.setString(2,photo);
                preparedStatement.executeUpdate();
            } catch (SQLException e) {
                System.err.println("Got an exception adding user!");
                e.printStackTrace();
            } finally { //closing prepared statement + connect
                if (preparedStatement != null){
                    try {
                        preparedStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if(connect != null){
                    try {
                        connect.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        //if ID already exists we can't insert the user
        else System.out.println("ID already exists");
    }

    //add user method with parameters exactly like user
    public void addUser (String nId, String lName , String fName,
                         String bd, String bp, String adr, String fp, ArrayList<String> photos){
        if(!checkIfIDExist(nId)){  //checking if the id exist so we can add the user
            connect = CoonectionConfiguration.getConnection();
            try {   //insert query of all attributes except photos into users table
                preparedStatement = connect
                        .prepareStatement("INSERT INTO  users (id, last_name, first_name, " +
                                "birth_date, birth_place, address, finger_print) " +
                                "VALUES (?, ?, ?, ?, ?, ?, ?)");
                preparedStatement.setString(1,nId);
                preparedStatement.setString(2,lName);
                preparedStatement.setString(3,fName);
                preparedStatement.setString(4,bd);
                preparedStatement.setString(5,bp);
                preparedStatement.setString(6,adr);
                preparedStatement.setString(7,fp);
                preparedStatement.executeUpdate();
                //insert query of photos into usersphoto table
                //inserting photos one by one until the end of photos array
                preparedStatement = connect.prepareStatement("INSERT INTO userphoto(user_id,user_photo) VALUES (?,?)");
                int i =0;
                while(i<photos.size()){
                    preparedStatement.setString(1,nId);
                    preparedStatement.setString(2,photos.get(i));
                    preparedStatement.executeUpdate();
                    i++;
                }
            } catch (SQLException e) {
                System.err.println("Got an exception adding user!");
                e.printStackTrace();
            } finally {  //closing prepared statement + connect
                if (preparedStatement != null){
                    try {
                        preparedStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if(connect != null){
                    try {
                        connect.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        else System.out.println("ID already exists");
    }

    //delete user method by ID
    public void deleteUser (String id){
        if (checkIfIDExist(id)){  //checking if the id exist so we can delete the user
            connect = CoonectionConfiguration.getConnection();
            try { //delete query of all user photos from userphoto table
                preparedStatement = connect.prepareStatement("DELETE FROM userphoto WHERE user_id = ?");
                preparedStatement.setString(1,id);
                preparedStatement.executeUpdate();
                //delete query of all attributes of user except photos from users table
                preparedStatement = connect.prepareStatement("DELETE FROM users WHERE id = ?");
                preparedStatement.setString(1,id);
                preparedStatement.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            } finally { //closing resultset + prepared statement + connect
                if(resultSet != null){
                    try {
                        resultSet.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if(preparedStatement != null){
                    try {
                        preparedStatement.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if(connect != null){
                    try {
                        connect.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        //if id doesn't exist
        else System.out.println("Error,user with id = "+id+" not found");
    }

    //update user method with all user parameters (only 1 photo to update) + boolean to indicate (add / delete the photo)
    public void updateUser (String oldId, String newId, String lName , String fName,
                            String bd, String bp, String adr, String fp, String photo, boolean add){
        if(checkIfIDExist(oldId)){ //checking if the oldId exists so we can update the user
                                    // and modify any attribute if the entry of it isn't null or empty
            User user = getUserById(oldId); //creating a new variable which will store the old database information of the user
            if(!checkIfIDExist(newId) || oldId.equals(newId)){ //checking if the new id doesn't exist or it equals to the old one
                //if the newId String is !null and !empty we update the user variable like : user.id = newId
                //ELSE if the newId String is null or empty we keep the old value of user.id
                //the same logic with the rest of the attributes
                if (newId!=null && !newId.isEmpty())user.setId(newId);
                if (lName!=null && !lName.isEmpty())user.setLastName(lName);
                if (fName!=null && !fName.isEmpty())user.setFirstName(fName);
                if (lName!=null && !bd.isEmpty())user.setBirthDate(bd);
                if (bp!=null && !bp.isEmpty())user.setBirthPlace(bp);
                if (adr!=null && !adr.isEmpty())user.setAddress(adr);
                if (fp!=null && !fp.isEmpty())user.setFingerPrint(fp);
                try {
                    connect = CoonectionConfiguration.getConnection();
                    statement = connect.createStatement();
                    //disabling the relation between users and userphoto tables so we can apply the update
                    statement.execute("SET FOREIGN_KEY_CHECKS=0");
                    //update query of all attributes of users table except photo
                    preparedStatement = connect.prepareStatement("UPDATE users,userphoto SET id = ?," +
                            "last_name = ?, first_name = ?,birth_date = ?,"
                            + "birth_place = ?,address = ?,finger_print = ?,user_id = ?"
                            + " WHERE id = ? AND user_id = ?");
                    //setting the values of columns of the query
                    preparedStatement.setString(1, user.getId());
                    preparedStatement.setString(2, user.getLastName());
                    preparedStatement.setString(3, user.getFirstName());
                    preparedStatement.setString(4, user.getBirthDate());
                    preparedStatement.setString(5, user.getBirthPlace());
                    preparedStatement.setString(6, user.getAddress());
                    preparedStatement.setString(7, user.getFingerPrint());
                    preparedStatement.setString(8, user.getId());
                    preparedStatement.setString(9, oldId);
                    preparedStatement.setString(10, oldId);
                    preparedStatement.executeUpdate();
                    //update query of photos of userphoto table (delete / add / keep the same ) depending on the boolean add
                    if(!add){ //!add means that we want to delete the photo in the parameters
                        //delete query of the photo
                        preparedStatement = connect.prepareStatement("DELETE FROM userphoto WHERE user_id = ? AND user_photo = ?");
                        preparedStatement.setString(1,user.getId());
                        preparedStatement.setString(2,photo);
                        preparedStatement.executeUpdate();
                    }else{ //here add=true so we will add the photo to the userphoto table
                        if(!(photo==null) && !(photo.isEmpty())){ //checking if the photo is !null and !empty (valid photo)
                            if(!user.getPhotos().contains(photo)){ //checking if the photo isn't already linked with the user
                                //insert query of the photo into userphoto table
                                preparedStatement = connect.prepareStatement("INSERT INTO userphoto (user_id,user_photo) VALUES (?,?)");
                                preparedStatement.setString(1,user.getId());
                                preparedStatement.setString(2,photo);
                                preparedStatement.executeUpdate();
                            }
                            else{ // this mean the photo array of the user already contains the photo
                                System.out.println("The photo : "+photo+" is already linked with the user");
                            }
                        }//the photo is null or empty which means we won't update the user photos
                        else System.out.println("The user photo haven't been changed");
                    }
                    statement.execute("SET FOREIGN_KEY_CHECKS=1"); //remaking the relation between the ids of users and userphoto tables
                    statement.close(); //closing it

                } catch (Exception e) {
                    e.printStackTrace();
                } finally { // closing preparedstatement and connect
                    if (preparedStatement != null) {
                        try {
                            preparedStatement.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if (connect != null) {
                        try {
                            connect.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                     }
                }
            } // the oldId != newId , and already exists in the users table
            else System.out.println("The new ID already used");
        } // if the id of the user who we want to update doesn't exist
        else System.out.println("ID not found");
    }

    //update user method with all user parameters (array of photos to update) + boolean to indicate (add / delete the photo)
    public void updateUser (String oldId, User nUser, boolean add){
        if(checkIfIDExist(oldId)){ //checking if the oldId exists so we can update the user
            User user = getUserById(oldId); //creating a new variable which will store the old database information of the user
                                            // and modify any attribute if the entry of it isn't null or empty
            if(!checkIfIDExist(nUser.getId())||oldId.equals(user.getId())){ //checking if the new id doesn't exist or it equals to the old one
                //if the newId String is !null and !empty we update the user variable like : user.id = nUser.id
                //ELSE if the newId String is null or empty we keep the old value of user.id
                //the same logic with the rest of the attributes
                if (nUser.getId()!=null && !nUser.getId().isEmpty())user.setId(nUser.getId());
                if (nUser.getLastName()!=null && !nUser.getFirstName().isEmpty())user.setLastName(nUser.getLastName());
                if (nUser.getFirstName()!=null && !nUser.getFirstName().isEmpty())user.setFirstName(nUser.getFirstName());
                if (nUser.getBirthDate()!=null && !nUser.getBirthDate().isEmpty())user.setBirthDate(nUser.getBirthDate());
                if (nUser.getBirthPlace()!=null && !nUser.getBirthPlace().isEmpty())user.setBirthPlace(nUser.getBirthPlace());
                if (nUser.getAddress()!=null && !nUser.getAddress().isEmpty())user.setAddress(nUser.getAddress());
                if (nUser.getFingerPrint()!=null && !nUser.getFingerPrint().isEmpty())user.setFingerPrint(nUser.getFingerPrint());
                try {
                    connect = CoonectionConfiguration.getConnection();
                    statement = connect.createStatement();
                    //disabling the relation between users and userphoto tables so we can apply the update
                    statement.execute("SET FOREIGN_KEY_CHECKS=0");
                    //update query of all attributes of users table except photos
                    preparedStatement = connect.prepareStatement("UPDATE users,userphoto SET id = ?," +
                            "last_name = ?, first_name = ?,birth_date = ?,"
                            + "birth_place = ?,address = ?,finger_print = ?,user_id = ?"
                            + " WHERE id = ? AND user_id = ?");
                    //setting the values of columns of the query
                    preparedStatement.setString(1, user.getId());
                    preparedStatement.setString(2, user.getLastName());
                    preparedStatement.setString(3, user.getFirstName());
                    preparedStatement.setString(4, user.getBirthDate());
                    preparedStatement.setString(5, user.getBirthPlace());
                    preparedStatement.setString(6, user.getAddress());
                    preparedStatement.setString(7, user.getFingerPrint());
                    preparedStatement.setString(8, user.getId());
                    preparedStatement.setString(9, oldId);
                    preparedStatement.setString(10, oldId);
                    preparedStatement.executeUpdate();
                    //update query of photos of userphoto table (delete / add / keep the same ) depending on the boolean add
                    if(!add){ //!add means that we want to delete the photos in the parameters (user.photos(array of photos))
                        int i=0;
                        while(i<nUser.getPhotos().size()){//deleting photos of user.photos one by one from the userphoto table
                            //delete query
                            preparedStatement = connect.prepareStatement("DELETE FROM userphoto WHERE user_id = ? AND user_photo = ?");
                            preparedStatement.setString(1,user.getId());
                            preparedStatement.setString(2,nUser.getPhotos().get(i));
                            preparedStatement.executeUpdate();
                            i++;
                        }
                    }else{ //here add=true so we will add the photos to the userphoto table
                        int j=0;
                        if(nUser.getPhotos().size()>=1){ // if the array photos isn't null or empty
                            while(j<nUser.getPhotos().size()){ //inserting photos of user.photos one by one into the userphoto table
                                if(!user.getPhotos().contains(nUser.getPhotos().get(j))){ //checking if the photo doesn't already exist
                                    //insert query
                                    preparedStatement = connect.prepareStatement("INSERT INTO userphoto (user_id,user_photo) VALUES (?,?)");
                                    preparedStatement.setString(1,user.getId());
                                    preparedStatement.setString(2,nUser.getPhotos().get(j));
                                    preparedStatement.executeUpdate();
                                }
                                else{ //the photo already exists in the user.photos
                                    System.out.println("The photo : "+user.getPhotos().get(j)+" is already linked with the user");
                                }
                                j++;
                            }
                        } // the array photos is null or empty so there are no photos to update
                        else System.out.println("The user photos haven't been changed");
                    }
                    statement.execute("SET FOREIGN_KEY_CHECKS=1"); //remaking the relation between ids of users and userphoto tables
                    statement.close(); //closing it
                } catch (Exception e) { //handling any exception
                    e.printStackTrace();
                } finally { // closing preparedstatement and connect
                    if (preparedStatement != null) {
                        try {
                            preparedStatement.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if (connect != null) {
                        try {
                            connect.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } // the oldId != newId , and already exists in the users table
            else System.out.println("The new ID already used");
        }// the id of the user who we want to update doesn't exist
        else System.out.println("ID not found");
    }

    //update method with the parameters of id of the user we want to update ,and nUser which will "!"REPLACE"!" the old user
    public void updateUser (String oldId, User nUser){
        if(checkIfIDExist(oldId)){ //checking if the oldId exists so we can update the user
            User user = getUserById(oldId); //creating a new variable which will store the old database information of the user
                                            // and modify any attribute if the entry of it isn't null or empty
            if(!checkIfIDExist(nUser.getId())||oldId.equals(user.getId())){ //checking if the new id doesn't exist or it equals to the old id
                //if the newId String is !null and !empty we update the user variable like : user.id = nUser.id
                //ELSE if the newId String is null or empty we keep the old value of user.id
                //the same logic with the rest of the attributes
                if (nUser.getId()!=null && !nUser.getId().isEmpty())user.setId(nUser.getId());
                if (nUser.getLastName()!=null && !nUser.getFirstName().isEmpty())user.setLastName(nUser.getLastName());
                if (nUser.getFirstName()!=null && !nUser.getFirstName().isEmpty())user.setFirstName(nUser.getFirstName());
                if (nUser.getBirthDate()!=null && !nUser.getBirthDate().isEmpty())user.setBirthDate(nUser.getBirthDate());
                if (nUser.getBirthPlace()!=null && !nUser.getBirthPlace().isEmpty())user.setBirthPlace(nUser.getBirthPlace());
                if (nUser.getAddress()!=null && !nUser.getAddress().isEmpty())user.setAddress(nUser.getAddress());
                if (nUser.getFingerPrint()!=null && !nUser.getFingerPrint().isEmpty())user.setFingerPrint(nUser.getFingerPrint());
                try {
                    connect = CoonectionConfiguration.getConnection();
                    statement = connect.createStatement();
                    //disabling the relation between users and userphoto tables so we can apply the update
                    statement.execute("SET FOREIGN_KEY_CHECKS=0");
                    //update query of all attributes of users table except photos
                    preparedStatement = connect.prepareStatement("UPDATE users,userphoto SET id = ?," +
                            "last_name = ?, first_name = ?,birth_date = ?,"
                            + "birth_place = ?,address = ?,finger_print = ?,user_id = ?"
                            + " WHERE id = ? AND user_id = ?");
                    //setting the values of columns of the query
                    preparedStatement.setString(1, user.getId());
                    preparedStatement.setString(2, user.getLastName());
                    preparedStatement.setString(3, user.getFirstName());
                    preparedStatement.setString(4, user.getBirthDate());
                    preparedStatement.setString(5, user.getBirthPlace());
                    preparedStatement.setString(6, user.getAddress());
                    preparedStatement.setString(7, user.getFingerPrint());
                    preparedStatement.setString(8, user.getId());
                    preparedStatement.setString(9, oldId);
                    preparedStatement.setString(10, oldId);
                    preparedStatement.executeUpdate();
                    //update query of photos of userphoto table (delete / add / keep the same ) depending on the boolean add
                    if(nUser.getPhotos().size()>=1){ // if the nUser array photos isn't null or empty
                        //deleting the old photos
                        int i=0;
                        while(i<user.getPhotos().size()){
                            preparedStatement = connect.prepareStatement("DELETE FROM userphoto WHERE user_id = ?");
                            preparedStatement.setString(1,user.getId());
                            preparedStatement.executeUpdate();
                            i++;
                        }
                        //adding the new photos of nUser
                        int j=0;
                        while(j<nUser.getPhotos().size()){
                            preparedStatement = connect.prepareStatement("INSERT INTO userphoto (user_id,user_photo) VALUES (?,?)");
                            preparedStatement.setString(1,user.getId());
                            preparedStatement.setString(2,nUser.getPhotos().get(j));
                            preparedStatement.executeUpdate();
                            j++;
                        }
                    } else System.out.println("The user photos haven't been changed"); //nUser array photos is null so no photos to replace
                    statement.execute("SET FOREIGN_KEY_CHECKS=1"); //remaking the relation between the ids of users & userphoto tables
                    statement.close(); // closing it
                } catch (Exception e) { //handling the exceptions
                    e.printStackTrace();
                } finally {  // closing preparedstatement and connect
                    if (preparedStatement != null) {
                        try {
                            preparedStatement.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                    if (connect != null) {
                        try {
                            connect.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } // the oldId != newId , and already exists in the users table
            else System.out.println("The new ID already used");
        } // the id of the user who we want to update doesn't exist
        else System.out.println("ID not found");
    }

    public User setUserFromResult(ResultSet result) throws SQLException {
        User user = new User();user.setId(result.getString("id"));
        user.setFirstName(result.getString("first_name"));
        user.setLastName(result.getString("last_name"));
        user.setBirthDate(result.getString("birth_date"));
        user.setBirthPlace(result.getString("birth_place"));
        user.setAddress(result.getString("address"));
        user.setFingerPrint(result.getString("finger_print"));
        return user;
    }

    public User getUserById(String id){
        User user = new User();
        ArrayList<String> photos = new ArrayList<String>();
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE users.id =userphoto.user_id AND id = ?");
            preparedStatement.setString(1,id);
            resultSet = preparedStatement.executeQuery();
            if(!resultSet.isBeforeFirst())user = null;
            else {
                while (resultSet.next()){
                    user = setUserFromResult(resultSet);
                    photos.add(resultSet.getString("user_photo"));
                }
                user.setPhotos(photos);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return user;
    }

    public TreeSet<User> getUserByFullName(String lName, String fName){
        TreeSet<User> result = new TreeSet<>();
        int i=0;
        int j=0;
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE last_name = ? AND first_name = ?" +
                                                        "AND users.id = userphoto.user_id");
            preparedStatement.setString(1,lName);
            preparedStatement.setString(2,fName);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                result.add(setUserFromResult(resultSet));
                for(User u :result){
                    if(u.getId().equals(resultSet.getString("user_id"))){
                        u.getPhotos().add(resultSet.getString("user_photo"));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public TreeSet<User> getUserByFirstName(String fName){
        TreeSet<User> result = new TreeSet<>();
        int i=0;
        int j=0;
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE first_name = ?" +
                    "AND users.id = userphoto.user_id");
            preparedStatement.setString(1,fName);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                result.add(setUserFromResult(resultSet));
                for(User u :result){
                    if(u.getId().equals(resultSet.getString("user_id"))){
                        u.getPhotos().add(resultSet.getString("user_photo"));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public TreeSet<User> getUserByLastName(String lName){
        TreeSet<User> result = new TreeSet<>();
        int i=0;
        int j=0;
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE last_name = ?" +
                    "AND users.id = userphoto.user_id");
            preparedStatement.setString(1,lName);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                result.add(setUserFromResult(resultSet));
                for(User u :result){
                    if(u.getId().equals(resultSet.getString("user_id"))){
                        u.getPhotos().add(resultSet.getString("user_photo"));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public TreeSet<User> getUserByBirthPlace (String birthPlace){
        TreeSet<User> result = new TreeSet<>();
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE birth_place = ?" +
                                                            "AND users.id = userphoto.user_id");
            preparedStatement.setString(1,birthPlace);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                result.add(setUserFromResult(resultSet));
                for(User u :result){
                    if(u.getId().equals(resultSet.getString("user_id"))){
                        u.getPhotos().add(resultSet.getString("user_photo"));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public TreeSet<User> getUserByNameAndBirthPlace (String lName, String fName, String bP){
        TreeSet<User> result = new TreeSet<>();
        connect = CoonectionConfiguration.getConnection();
        try {
            preparedStatement = connect.prepareStatement("SELECT *,user_photo FROM users,userphoto WHERE birth_place = ?" +
                    "AND last_name = ? AND first_name = ? AND users.id = userphoto.user_id");
            preparedStatement.setString(1,bP);
            preparedStatement.setString(2,lName);
            preparedStatement.setString(3,fName);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                result.add(setUserFromResult(resultSet));
                for(User u :result){
                    if(u.getId().equals(resultSet.getString("user_id"))){
                        u.getPhotos().add(resultSet.getString("user_photo"));
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if(resultSet != null){
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(preparedStatement != null){
                try {
                    preparedStatement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(connect != null){
                try {
                    connect.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

}

